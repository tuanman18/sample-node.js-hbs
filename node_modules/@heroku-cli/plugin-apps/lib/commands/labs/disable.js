'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _command = require('@heroku-cli/command');

var _cliUx = require('cli-ux');

const SecurityExceptionFeatures = {
  'spaces-strict-tls': {
    prompt: async function (out, app) {
      const cliUtil = require('heroku-cli-util');
      out.warn('WARNING: Insecure Action');
      out.warn('You are enabling an older security protocol, TLS 1.0, which some organizations may not deem secure.');
      out.warn(`To proceed, type ${app} or re-run this command with --confirm ${app}`);
      let name = await cliUtil.prompt();
      return name;
    }
  }
};

class LabsDisable extends _command.Command {

  async run() {
    let feature = this.args.feature;
    let request;
    let target;

    if (SecurityExceptionFeatures[feature]) {
      if (this.flags.confirm !== this.flags.app) {
        let prompt = SecurityExceptionFeatures[feature].prompt;
        let confirm = await prompt(_cliUx.cli, this.flags.app);
        if (confirm !== this.flags.app) {
          throw new Error('Confirmation name did not match app name. Try again.');
        }
      }
    }

    try {
      await this.heroku.get(`/account/features/${feature}`);
      request = this.disableFeature(feature);
      target = (await this.heroku.get('/account')).body.email;
    } catch (err) {
      if (err.http.statusCode !== 404) throw err;
      // might be an app feature
      if (!this.flags.app) throw err;
      await this.heroku.get(`/apps/${this.flags.app}/features/${feature}`);
      request = this.disableFeature(feature, this.flags.app);
      target = this.flags.app;
    }

    _cliUx.cli.action.start(`Disabling ${_cliUx.cli.color.green(feature)} for ${_cliUx.cli.color.cyan(target)}`);
    await request;
  }

  disableFeature(feature, app) {
    return this.heroku.patch(app ? `/apps/${app}/features/${feature}` : `/account/features/${feature}`, {
      body: { enabled: false }
    });
  }
}
exports.default = LabsDisable;
LabsDisable.topic = 'labs';
LabsDisable.command = 'disable';
LabsDisable.description = 'disables an experimental feature';
LabsDisable.args = [{ name: 'feature' }];
LabsDisable.flags = {
  app: _command.flags.app(),
  remote: _command.flags.remote(),
  confirm: _command.flags.string({ required: false })
};